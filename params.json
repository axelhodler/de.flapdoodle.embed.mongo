{"name":"Embedmongo.flapdoodle.de","tagline":"","body":"# Organisation Flapdoodle OSS\r\n[![Build Status](https://drone.io/github.com/flapdoodle-oss/embedmongo.flapdoodle.de/status.png)](https://drone.io/github.com/flapdoodle-oss/embedmongo.flapdoodle.de/latest)\r\n\r\nadsfasdfasdfasdf\r\nWe are now a github organisation. You are invited to participate. :)\r\n\r\n# Embedded MongoDB\r\n\r\nEmbedded MongoDB will provide a platform neutral way for running mongodb in unittests.\r\n\r\n## Why?\r\n\r\n- dropping databases causing some pains (often you have to wait long time after each test)\r\n- its easy, much easier as installing right version by hand\r\n- you can change version per test\r\n\r\n## Dependencies\r\n\r\n### Build on top of\r\n\r\n- Embed Process Util [de.flapdoodle.embed.process](https://github.com/flapdoodle-oss/de.flapdoodle.embed.process)\r\n\r\n### Other ways to use Embedded MongoDB\r\n\r\n- in a Maven build using [embedmongo-maven-plugin](https://github.com/joelittlejohn/embedmongo-maven-plugin)\r\n- in a Clojure/Leiningen project using [lein-embongo](https://github.com/joelittlejohn/lein-embongo)\r\n- in a Gradle build using [gradle-mongo-plugin](https://github.com/sourcemuse/GradleMongoPlugin)\r\n- in a Scala/specs2 specification using [specs2-embedmongo](https://github.com/athieriot/specs2-embedmongo)\r\n- in Scala tests using [scalatest-embedmongo](https://github.com/SimplyScala/scalatest-embedmongo)\r\n\r\n### Comments about Embedded MongoDB in the Wild\r\n\r\n- http://stackoverflow.com/questions/6437226/embedded-mongodb-when-running-integration-tests\r\n- http://www.cubeia.com/index.php/blog/archives/436\r\n- http://blog.diabol.se/?p=390\r\n\r\n### Other MongoDB Stuff\r\n\r\n- https://github.com/thiloplanz/jmockmongo - mongodb mocking\r\n- https://github.com/lordofthejars/nosql-unit - extended nosql unit testing\r\n- https://github.com/jirutka/embedmongo-spring - Spring Factory Bean for EmbedMongo\r\n\r\n## Howto\r\n\r\n### Maven\r\n\r\n**IMPORTANT NOTE: maven groupId and artifactId change**\r\n\r\n*\tgroupId from __de.flapdoodle.embedmongo__ to __de.flapdoodle.embed__\r\n*\tartifactId from __de.flapdoodle.embedmongo__ to __de.flapdoodle.embed.mongo__\r\n\r\nStable (Maven Central Repository, Released: 06.04.2014 - wait 24hrs for [maven central](http://repo1.maven.org/maven2/de/flapdoodle/embed/de.flapdoodle.embed.mongo/maven-metadata.xml))\r\n\r\n\t<dependency>\r\n\t\t<groupId>de.flapdoodle.embed</groupId>\r\n\t\t<artifactId>de.flapdoodle.embed.mongo</artifactId>\r\n\t\t<version>1.43</version>\r\n\t</dependency>\r\n\r\nSnapshots (Repository http://oss.sonatype.org/content/repositories/snapshots)\r\n\r\n\t<dependency>\r\n\t\t<groupId>de.flapdoodle.embed</groupId>\r\n\t\t<artifactId>de.flapdoodle.embed.mongo</artifactId>\r\n\t\t<version>1.44-SNAPSHOT</version>\r\n\t</dependency>\r\n\r\n\r\n### Build from source\r\n\r\nWhen you fork or clone our branch you should always be able to build the library by running \r\n\r\n\tmvn package\r\n\r\nThere is also a build.gradle file available which might sometimes be outdated but we try to keep it working. So the gradle command is\r\n\r\n\tgradle build\r\n\r\nOr if you want to use the gradle wrapper:\r\n\r\n\t./gradlew build\r\n \r\n### Changelog\r\n\r\n[Changelog](Changelog.md)\r\n\r\n### Supported Versions\r\n\r\nVersions: some older, a stable and a development version\r\nSupport for Linux, Windows and MacOSX.\r\n\r\n### Usage\r\n```java\r\n\timport de.flapdoodle.embed.mongo.config.ArtifactStoreBuilder;\r\n\t\r\n\t...\r\n\tMongodStarter runtime = MongodStarter.getDefaultInstance();\r\n\r\n\tint port = 12345;\r\n\tIMongodConfig mongodConfig = new MongodConfigBuilder()\r\n\t\t.version(Version.Main.PRODUCTION)\r\n\t\t.net(new Net(port, Network.localhostIsIPv6()))\r\n\t\t.build();\r\n\r\n\tMongodExecutable mongodExecutable = null;\r\n\ttry {\r\n\t\tmongodExecutable = runtime.prepare(mongodConfig);\r\n\t\tMongodProcess mongod = mongodExecutable.start();\r\n\r\n\t\tMongoClient mongo = new MongoClient(\"localhost\", port);\r\n\t\tDB db = mongo.getDB(\"test\");\r\n\t\tDBCollection col = db.createCollection(\"testCol\", new BasicDBObject());\r\n\t\tcol.save(new BasicDBObject(\"testDoc\", new Date()));\r\n\r\n\t} finally {\r\n\t\tif (mongodExecutable != null)\r\n\t\t\tmongodExecutable.stop();\r\n\t}\r\n```\r\n\r\n### Usage - Optimization\r\n\r\nYou should make the MongodStarter instance or the RuntimeConfig instance static (per Class or per JVM).\r\nThe main purpose of that is the caching of extracted executables and library files. This is done by the ArtifactStore instance\r\nconfigured with the RuntimeConfig instance. Each instance uses its own cache so multiple RuntimeConfig instances will use multiple\r\nArtifactStores an multiple caches with much less cache hits:)  \r\n\r\n### Usage - custom mongod filename \r\n\r\nTo avoid windows firewall dialog popups you can chose a stable executable name with UserTempNaming. \r\nThis way the firewall dialog only popup once any your done. See [Executable Collision](#executable-collision) \r\n```java\r\n\timport de.flapdoodle.embed.mongo.config.ArtifactStoreBuilder;\r\n\t\r\n\t...\r\n\r\n\tint port = 12345;\r\n\r\n\tCommand command = Command.MongoD;\r\n\r\n\tIRuntimeConfig runtimeConfig = new RuntimeConfigBuilder()\r\n\t\t.defaults(command)\r\n\t\t.artifactStore(new ArtifactStoreBuilder()\r\n\t\t\t.defaults(command)\r\n\t\t\t.download(new DownloadConfigBuilder()\r\n\t\t\t.defaultsForCommand(command))\r\n\t\t\t.executableNaming(new UserTempNaming()))\r\n\t\t.build();\r\n\r\n\tIMongodConfig mongodConfig = new MongodConfigBuilder()\r\n\t\t.version(Version.Main.PRODUCTION)\r\n\t\t.net(new Net(port, Network.localhostIsIPv6()))\r\n\t\t.build();\r\n\r\n\tMongodStarter runtime = MongodStarter.getInstance(runtimeConfig);\r\n\r\n\tMongodExecutable mongodExecutable = null;\r\n\ttry {\r\n\t\tmongodExecutable = runtime.prepare(mongodConfig);\r\n\t\tMongodProcess mongod = mongodExecutable.start();\r\n\r\n\t\tMongoClient mongo = new MongoClient(\"localhost\", port);\r\n\t\tDB db = mongo.getDB(\"test\");\r\n\t\tDBCollection col = db.createCollection(\"testCol\", new BasicDBObject());\r\n\t\tcol.save(new BasicDBObject(\"testDoc\", new Date()));\r\n\r\n\t} finally {\r\n\t\tif (mongodExecutable != null)\r\n\t\t\tmongodExecutable.stop();\r\n\t}\r\n```\r\n\r\n### Unit Tests\r\n```java\r\n\tpublic abstract class AbstractMongoDBTest extends TestCase {\r\n\r\n\t\t/**\r\n\t\t * please store Starter or RuntimeConfig in a static final field\r\n\t\t * if you want to use artifact store caching (or else disable caching) \r\n\t\t */\r\n\t\tprivate static final MongodStarter starter = MongodStarter.getDefaultInstance();\r\n\r\n\t\tprivate MongodExecutable _mongodExe;\r\n\t\tprivate MongodProcess _mongod;\r\n\r\n\t\tprivate MongoClient _mongo;\r\n\t\t@Override\r\n\t\tprotected void setUp() throws Exception {\r\n\r\n\t\t\t_mongodExe = starter.prepare(new MongodConfigBuilder()\r\n\t\t\t\t.version(Version.Main.PRODUCTION)\r\n\t\t\t\t.net(new Net(12345, Network.localhostIsIPv6()))\r\n\t\t\t\t.build());\r\n\t\t\t_mongod = _mongodExe.start();\r\n\r\n\t\t\tsuper.setUp();\r\n\r\n\t\t\t_mongo = new MongoClient(\"localhost\", 12345);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tprotected void tearDown() throws Exception {\r\n\t\t\tsuper.tearDown();\r\n\r\n\t\t\t_mongod.stop();\r\n\t\t\t_mongodExe.stop();\r\n\t\t}\r\n\r\n\t\tpublic Mongo getMongo() {\r\n\t\t\treturn _mongo;\r\n\t\t}\r\n\r\n\t}\r\n```\r\n\r\n#### ... with some more help\r\n```java\r\n\t...\r\n\tMongodForTestsFactory factory = null;\r\n\ttry {\r\n\t\tfactory = MongodForTestsFactory.with(Version.Main.PRODUCTION);\r\n\r\n\t\tMongoClient mongo = factory.newMongo();\r\n\t\tDB db = mongo.getDB(\"test-\" + UUID.randomUUID());\r\n\t\tDBCollection col = db.createCollection(\"testCol\", new BasicDBObject());\r\n\t\tcol.save(new BasicDBObject(\"testDoc\", new Date()));\r\n\r\n\t} finally {\r\n\t\tif (factory != null)\r\n\t\t\tfactory.shutdown();\r\n\t}\r\n\t...\r\n```\r\n\r\n### Customize Download URL\r\n```java\r\n\t...\r\n\tCommand command = Command.MongoD;\r\n\r\n\tIRuntimeConfig runtimeConfig = new RuntimeConfigBuilder()\r\n\t\t.defaults(command)\r\n\t\t.artifactStore(new ArtifactStoreBuilder()\r\n\t\t\t.defaults(command)\r\n\t\t\t.download(new DownloadConfigBuilder()\r\n\t\t\t\t.defaultsForCommand(command)\r\n\t\t\t\t.downloadPath(\"http://my.custom.download.domain/\")))\r\n\t\t.build();\r\n\t...\r\n```\r\n\r\n### Customize Artifact Storage\r\n```java\r\n\t...\r\n\tIDirectory artifactStorePath = new FixedPath(System.getProperty(\"user.home\") + \"/.embeddedMongodbCustomPath\");\r\n\tITempNaming executableNaming = new UUIDTempNaming();\r\n\r\n\tCommand command = Command.MongoD;\r\n\r\n\tIRuntimeConfig runtimeConfig = new RuntimeConfigBuilder()\r\n\t\t.defaults(command)\r\n\t\t.artifactStore(new ArtifactStoreBuilder()\r\n\t\t\t.defaults(command)\r\n\t\t\t.download(new DownloadConfigBuilder()\r\n\t\t\t\t.defaultsForCommand(command)\r\n\t\t\t\t.artifactStorePath(artifactStorePath))\r\n\t\t\t.executableNaming(executableNaming))\r\n\t\t.build();\r\n\r\n\tMongodStarter runtime = MongodStarter.getInstance(runtimeConfig);\r\n\tMongodExecutable mongodExe = runtime.prepare(mongodConfig);\r\n\t...\r\n```\r\n\r\n### Usage - custom mongod process output\r\n\r\n#### ... to console with line prefix\r\n```java\r\n\t...\r\n\tProcessOutput processOutput = new ProcessOutput(Processors.namedConsole(\"[mongod>]\"),\r\n\t\t\tProcessors.namedConsole(\"[MONGOD>]\"), Processors.namedConsole(\"[console>]\"));\r\n\r\n\tIRuntimeConfig runtimeConfig = new RuntimeConfigBuilder()\r\n\t\t.defaults(Command.MongoD)\r\n\t\t.processOutput(processOutput)\r\n\t\t.build();\r\n\r\n\tMongodStarter runtime = MongodStarter.getInstance(runtimeConfig);\r\n\t...\r\n```\r\n\r\n#### ... to file\r\n```java\r\n\t...\r\n\tIStreamProcessor mongodOutput = Processors.named(\"[mongod>]\",\r\n\t\t\tnew FileStreamProcessor(File.createTempFile(\"mongod\", \"log\")));\r\n\tIStreamProcessor mongodError = new FileStreamProcessor(File.createTempFile(\"mongod-error\", \"log\"));\r\n\tIStreamProcessor commandsOutput = Processors.namedConsole(\"[console>]\");\r\n\r\n\tIRuntimeConfig runtimeConfig = new RuntimeConfigBuilder()\r\n\t\t.defaults(Command.MongoD)\r\n\t\t.processOutput(new ProcessOutput(mongodOutput, mongodError, commandsOutput))\r\n\t\t.build();\r\n\r\n\tMongodStarter runtime = MongodStarter.getInstance(runtimeConfig);\r\n\t...\r\n\r\n\t...\r\n\tpublic class FileStreamProcessor implements IStreamProcessor {\r\n\r\n\t\tprivate FileOutputStream outputStream;\r\n\r\n\t\tpublic FileStreamProcessor(File file) throws FileNotFoundException {\r\n\t\t\toutputStream = new FileOutputStream(file);\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void process(String block) {\r\n\t\t\ttry {\r\n\t\t\t\toutputStream.write(block.getBytes());\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void onProcessed() {\r\n\t\t\ttry {\r\n\t\t\t\toutputStream.close();\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t...\r\n```\r\n\r\n#### ... to java logging\r\n```java\r\n\t...\r\n\tLogger logger = Logger.getLogger(getClass().getName());\r\n\r\n\tProcessOutput processOutput = new ProcessOutput(Processors.logTo(logger, Level.INFO), Processors.logTo(logger,\r\n\t\t\tLevel.SEVERE), Processors.named(\"[console>]\", Processors.logTo(logger, Level.FINE)));\r\n\r\n\tIRuntimeConfig runtimeConfig = new RuntimeConfigBuilder()\r\n\t\t.defaultsWithLogger(Command.MongoD,logger)\r\n\t\t.processOutput(processOutput)\r\n\t\t.artifactStore(new ArtifactStoreBuilder()\r\n\t\t\t.defaults(Command.MongoD)\r\n\t\t\t.download(new DownloadConfigBuilder()\r\n\t\t\t\t.defaultsForCommand(Command.MongoD)\r\n\t\t\t\t.progressListener(new LoggingProgressListener(logger, Level.FINE))))\r\n\t\t.build();\r\n\r\n\tMongodStarter runtime = MongodStarter.getInstance(runtimeConfig);\r\n\t...\r\n```\r\n\r\n#### ... to default java logging (the easy way)\r\n```java\r\n\t...\r\n\tLogger logger = Logger.getLogger(getClass().getName());\r\n\r\n\tIRuntimeConfig runtimeConfig = new RuntimeConfigBuilder()\r\n\t\t.defaultsWithLogger(Command.MongoD, logger)\r\n\t\t.build();\r\n\r\n\tMongodStarter runtime = MongodStarter.getInstance(runtimeConfig);\r\n\t...\r\n```\r\n\r\n#### ... to null device\r\n```java\r\n\t...\r\n\tLogger logger = Logger.getLogger(getClass().getName());\r\n\r\n\tIRuntimeConfig runtimeConfig = new RuntimeConfigBuilder()\r\n\t\t.defaultsWithLogger(Command.MongoD, logger)\r\n\t\t.processOutput(ProcessOutput.getDefaultInstanceSilent())\r\n\t\t.build();\r\n\r\n\tMongodStarter runtime = MongodStarter.getInstance(runtimeConfig);\r\n\t...\r\n```\r\n\r\n### Custom Version\r\n```java\r\n\t...\r\n\tint port = 12345;\r\n\tIMongodConfig mongodConfig = new MongodConfigBuilder()\r\n\t\t.version(Versions.withFeatures(new GenericVersion(\"2.0.7-rc1\"),Feature.SYNC_DELAY))\r\n\t\t.net(new Net(port, Network.localhostIsIPv6()))\r\n\t\t.build();\r\n\r\n\tMongodStarter runtime = MongodStarter.getDefaultInstance();\r\n\tMongodProcess mongod = null;\r\n\r\n\tMongodExecutable mongodExecutable = null;\r\n\ttry {\r\n\t\tmongodExecutable = runtime.prepare(mongodConfig);\r\n\t\tmongod = mongodExecutable.start();\r\n\r\n\t\t...\r\n\r\n\t} finally {\r\n\t\tif (mongod != null) {\r\n\t\t\tmongod.stop();\r\n\t\t}\r\n\t\tif (mongodExecutable != null)\r\n\t\t\tmongodExecutable.stop();\r\n\t}\r\n\t...\r\n```\r\n\r\n### Main Versions\r\n```java\r\n\tIVersion version = Version.V2_2_5;\r\n\t// uses latest supported 2.2.x Version\r\n\tversion = Version.Main.V2_2;\r\n\t// uses latest supported production version\r\n\tversion = Version.Main.PRODUCTION;\r\n\t// uses latest supported development version\r\n\tversion = Version.Main.DEVELOPMENT;\r\n```\r\n\r\n### Use Free Server Port\r\n\r\n\tWarning: maybe not as stable, as expected.\r\n\r\n#### ... by hand\r\n```java\r\n\t...\r\n\tint port = Network.getFreeServerPort();\r\n\t...\r\n```\r\n\r\n#### ... automagic\r\n```java\r\n\t...\r\n\tIMongodConfig mongodConfig = new MongodConfigBuilder().version(Version.Main.PRODUCTION).build();\r\n\r\n\tMongodStarter runtime = MongodStarter.getDefaultInstance();\r\n\r\n\tMongodExecutable mongodExecutable = null;\r\n\tMongodProcess mongod = null;\r\n\ttry {\r\n\t\tmongodExecutable = runtime.prepare(mongodConfig);\r\n\t\tmongod = mongodExecutable.start();\r\n\r\n\t\tMongoClient mongo = new MongoClient(new ServerAddress(mongodConfig.net().getServerAddress(), mongodConfig.net().getPort()));\r\n\t\t...\r\n\r\n\t} finally {\r\n\t\tif (mongod != null) {\r\n\t\t\tmongod.stop();\r\n\t\t}\r\n\t\tif (mongodExecutable != null)\r\n\t\t\tmongodExecutable.stop();\r\n\t}\r\n\t...\r\n```\r\n\r\n### ... custom timeouts\r\n```java\r\n\t...\r\n\tIMongodConfig mongodConfig = new MongodConfigBuilder()\r\n\t\t.version(Version.Main.PRODUCTION)\r\n\t\t.timeout(new Timeout(30000))\r\n\t\t.build();\r\n\t...\r\n```\r\n\r\n### Command Line Post Processing\r\n```java\r\n\t...\r\n\tICommandLinePostProcessor postProcessor= ...\r\n\r\n\tIRuntimeConfig runtimeConfig = new RuntimeConfigBuilder()\r\n\t\t.defaults(Command.MongoD)\r\n\t\t.commandLinePostProcessor(postProcessor)\r\n\t\t.build();\r\n\t...\r\n```\r\n### Custom Command Line Options\r\n\r\nWe changed the syncDelay to 0 which turns off sync to disc. To turn on default value used defaultSyncDelay().\r\n```java\r\n\tIMongodConfig mongodConfig = new MongodConfigBuilder()\r\n\t.version(Version.Main.PRODUCTION)\r\n\t.cmdOptions(new MongoCmdOptionsBuilder()\r\n\t\t.syncDeplay(10)\r\n\t\t.useNoPrealloc(false)\r\n\t\t.useSmallFiles(false)\r\n\t\t.useNoJournal(false)\r\n\t\t.build())\r\n\t.build();\r\n\t...\r\n```\r\n\r\n### Snapshot database files from temp dir\r\n\r\nWe changed the syncDelay to 0 which turns off sync to disc. To get the files to create an snapshot you must turn on default value (use defaultSyncDelay()).\r\n```java\r\n\tIMongodConfig mongodConfig = new MongodConfigBuilder()\r\n\t.version(Version.Main.PRODUCTION)\r\n\t.processListener(new ProcessListenerBuilder()\r\n\t\t.copyDbFilesBeforeStopInto(destination)\r\n\t\t.build())\r\n\t.cmdOptions(new MongoCmdOptionsBuilder()\r\n\t\t.defaultSyncDelay()\r\n\t\t.build())\r\n\t.build();\r\n\t...\r\n```\r\n\r\n### Start mongos with mongod instance\r\n\r\nthis is an very easy example to use mongos and mongod\r\n```java\r\n\tint port = 12121;\r\n\tint defaultConfigPort = 12345;\r\n\tString defaultHost = \"localhost\";\r\n\r\n\tMongodProcess mongod = startMongod(defaultConfigPort);\r\n\r\n\ttry {\r\n\t\tMongosProcess mongos = startMongos(port, defaultConfigPort, defaultHost);\r\n\t\ttry {\r\n\t\t\tMongoClient mongoClient = new MongoClient(defaultHost, defaultConfigPort);\r\n\t\t\tSystem.out.println(\"DB Names: \" + mongoClient.getDatabaseNames());\r\n\t\t} finally {\r\n\t\t\tmongos.stop();\r\n\t\t}\r\n\t} finally {\r\n\t\tmongod.stop();\r\n\t}\r\n\r\n\tprivate MongosProcess startMongos(int port, int defaultConfigPort, String defaultHost) throws UnknownHostException,\r\n\t\t\tIOException {\r\n\t\tIMongosConfig mongosConfig = new MongosConfigBuilder()\r\n\t\t\t.version(Version.Main.PRODUCTION)\r\n\t\t\t.net(new Net(port, Network.localhostIsIPv6()))\r\n\t\t\t.configDB(defaultHost + \":\" + defaultConfigPort)\r\n\t\t\t.build();\r\n\r\n\t\tMongosExecutable mongosExecutable = MongosStarter.getDefaultInstance().prepare(mongosConfig);\r\n\t\tMongosProcess mongos = mongosExecutable.start();\r\n\t\treturn mongos;\r\n\t}\r\n\r\n\tprivate MongodProcess startMongod(int defaultConfigPort) throws UnknownHostException, IOException {\r\n\t\tIMongodConfig mongoConfigConfig = new MongodConfigBuilder()\r\n\t\t\t.version(Version.Main.PRODUCTION)\r\n\t\t\t.net(new Net(defaultConfigPort, Network.localhostIsIPv6()))\r\n\t\t\t.configServer(true)\r\n\t\t\t.build();\r\n\r\n\t\tMongodExecutable mongodExecutable = MongodStarter.getDefaultInstance().prepare(mongoConfigConfig);\r\n\t\tMongodProcess mongod = mongodExecutable.start();\r\n\t\treturn mongod;\r\n\t}\r\n```\r\n\r\n### Import JSON file with mongoimport command\r\n```java\r\n    public void testStartAndStopMongoImportAndMongod() throws UnknownHostException, IOException {\r\n        int defaultConfigPort = 12345;\r\n        String defaultHost = \"localhost\";\r\n        String database = \"importTestDB\";\r\n        String collection = \"importedCollection\";\r\n        String jsonFile=filePathAsString;\r\n        MongodProcess mongod = startMongod(defaultConfigPort);\r\n\r\n        try {\r\n            MongoImportProcess mongoImport = startMongoImport(defaultConfigPort, database,collection,jsonFile,true,true,true);\r\n            try {\r\n                MongoClient mongoClient = new MongoClient(defaultHost, defaultConfigPort);\r\n                System.out.println(\"DB Names: \" + mongoClient.getDatabaseNames());\r\n            } finally {\r\n                mongoImport.stop();\r\n            }\r\n        } finally {\r\n            mongod.stop();\r\n        }\r\n    }\r\n\r\n    private MongoImportProcess startMongoImport(int port, String dbName, String collection, String jsonFile, Boolean jsonArray,Boolean upsert, Boolean drop) throws UnknownHostException,\r\n            IOException {\r\n        IMongoImportConfig mongoImportConfig = new MongoImportConfigBuilder()\r\n                .version(Version.Main.PRODUCTION)\r\n                .net(new Net(port, Network.localhostIsIPv6()))\r\n                .db(dbName)\r\n                .collection(collection)\r\n                .upsert(upsert)\r\n                .dropCollection(drop)\r\n                .jsonArray(jsonArray)\r\n                .importFile(jsonFile)\r\n                .build();\r\n\r\n        MongoImportExecutable mongoImportExecutable = MongoImportStarter.getDefaultInstance().prepare(mongoImportConfig);\r\n        MongoImportProcess mongoImport = mongoImportExecutable.start();\r\n        return mongoImport;\r\n    }\r\n```\r\n\r\n### Executable Collision\r\n\r\nThere is a good chance of filename collisions if you use a custom naming schema for the executable (see [Usage - custom mongod filename](#usage---custom-mongod-filename)). If you got an exception, then you should make your RuntimeConfig or MongoStarter class or jvm static (static final in your test class or singleton class for all tests).\r\n\r\n----\r\n\r\nYourKit is kindly supporting open source projects with its full-featured Java Profiler.\r\nYourKit, LLC is the creator of innovative and intelligent tools for profiling\r\nJava and .NET applications. Take a look at YourKit's leading software products:\r\n<a href=\"http://www.yourkit.com/java/profiler/index.jsp\">YourKit Java Profiler</a> and\r\n<a href=\"http://www.yourkit.com/.net/profiler/index.jsp\">YourKit .NET Profiler</a>.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}